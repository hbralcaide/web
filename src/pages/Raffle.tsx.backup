import { useState, useEffect } from 'react'
import { useSearchParams, useNavigate } from 'react-router-dom'
import { supabase } from '../lib/supabase'

interface StallWithApplicants {
    id: string
    stall_number: string
    market_sections: {
        name: string
        code: string
    }
    applicants: {
        id: string
        first_name: string
        last_name: string
                                       <h2 className="text-3xl font-bold text-center mb-8 text-gray-800">
                                    ♦ Spinning Wheel Raffle ♦
                                </h2>siness_name: string
    }[]
}

export default function Raffle() {
    const navigate = useNavigate()
    const [loading, setLoading] = useState(true)
    const [availableStalls, setAvailableStalls] = useState<StallWithApplicants[]>([])
    const [selectedStall, setSelectedStall] = useState<StallWithApplicants | null>(null)
    const [selectedApplicant, setSelectedApplicant] = useState<{ id: string, first_name: string, last_name: string, business_name: string } | null>(null)
    const [raffling, setRaffling] = useState(false)
    const [spinning, setSpinning] = useState(false)
    const [spinComplete, setSpinComplete] = useState(false)
    const [wheelRotation, setWheelRotation] = useState(0)

    useEffect(() => {
        fetchAvailableStalls()
    }, [])

    const fetchAvailableStalls = async () => {
        try {
            setLoading(true)

            const { data: stallApplications, error: applicationsError } = await (supabase as any)
                .from('stall_applications')
                .select(`
                    *,
                    vendor_applications (
                        id,
                        first_name,
                        last_name,
                        business_name,
                        status
                    ),
                    stalls (
                        id,
                        stall_number,
                        status,
                        section_id
                    )
                `)

            if (applicationsError) {
                console.error('Error fetching stall applications:', applicationsError)
                return
            }

            const { data: marketSections, error: sectionsError } = await (supabase as any)
                .from('market_sections')
                .select('id, name, code')

            if (sectionsError) {
                console.error('Error fetching market sections:', sectionsError)
                return
            }

            const sectionsMap = new Map()
            if (marketSections) {
                marketSections.forEach((section: any) => {
                    sectionsMap.set(section.id, section)
                })
            }

            const stallsMap = new Map()

            if (stallApplications) {
                stallApplications.forEach((app: any) => {
                    const stall = app.stalls
                    const vendor = app.vendor_applications

                    if (!stall || !vendor) return
                    if (vendor.status !== 'approved_for_raffle') return
                    if (vendor.status === 'won_raffle') return

                    const stallId = stall.id

                    if (!stallsMap.has(stallId)) {
                        const marketSection = sectionsMap.get(stall.section_id)
                        stallsMap.set(stallId, {
                            id: stall.id,
                            stall_number: stall.stall_number,
                            market_sections: marketSection || { name: 'Unknown Section', code: 'UNK' },
                            applicants: []
                        })
                    }

                    const stallData = stallsMap.get(stallId)
                    if (stallData) {
                        stallData.applicants.push({
                            id: vendor.id,
                            first_name: vendor.first_name,
                            last_name: vendor.last_name,
                            business_name: vendor.business_name
                        })
                    }
                })
            }

            const stallsWithApplicants = Array.from(stallsMap.values()).sort((a, b) =>
                a.stall_number.localeCompare(b.stall_number)
            )

            setAvailableStalls(stallsWithApplicants)
        } catch (error) {
            console.error('Error in fetchAvailableStalls:', error)
        } finally {
            setLoading(false)
        }
    }

    const spinWheel = () => {
        if (!selectedStall || selectedStall.applicants.length === 0) return

        setSelectedApplicant(null)
        setSpinComplete(false)
        setSpinning(true)

        // Calculate random rotation (multiple full spins + random final position)
        const baseRotations = 5 + Math.random() * 5 // 5-10 full rotations
        const randomIndex = Math.floor(Math.random() * selectedStall.applicants.length)
        const segmentAngle = 360 / selectedStall.applicants.length
        const finalAngle = randomIndex * segmentAngle
        const totalRotation = baseRotations * 360 + finalAngle

        setWheelRotation(totalRotation)

        // Stop spinning after animation completes
        setTimeout(() => {
            const winner = selectedStall.applicants[randomIndex]
            setSelectedApplicant(winner)
            setSpinning(false)
            setSpinComplete(true)
        }, 3000)
    }

    const handleRaffle = async () => {
        if (!selectedStall || !selectedApplicant) return

        try {
            setRaffling(true)

            // Update winner status
            const { error: updateError } = await (supabase as any)
                .from('vendor_applications')
                .update({
                    status: 'won_raffle',
                    updated_at: new Date().toISOString()
                })
                .eq('id', selectedApplicant.id)

            if (updateError) {
                console.error('Failed to update application status:', updateError)
                alert('Failed to update application status.')
                return
            }

            // Create raffle event
            const { data: raffleEvent, error: raffleEventError } = await (supabase as any)
                .from('raffle_events')
                .insert({
                    stall_id: selectedStall.id,
                    event_name: `Raffle for ${selectedStall.stall_number}`,
                    description: `Raffle conducted for stall ${selectedStall.stall_number}`,
                    status: 'completed',
                    conducted_at: new Date().toISOString(),
                    conducted_by: null
                })
                .select()
                .single()

            if (raffleEventError) {
                console.error('Failed to create raffle event:', raffleEventError)
                alert('Failed to create raffle event.')
                return
            }

            // Create participant record
            const { error: participantError } = await (supabase as any)
                .from('raffle_participants')
                .insert({
                    raffle_event_id: raffleEvent.id,
                    vendor_application_id: selectedApplicant.id,
                    is_winner: true,
                    selected_at: new Date().toISOString()
                })

            if (participantError) {
                console.error('Failed to create raffle participant:', participantError)
                alert('Failed to create raffle participant.')
                return
            }

            // Update stall status
            const { error: stallUpdateError } = await (supabase as any)
                .from('stalls')
                .update({
                    status: 'occupied',
                    vendor_profile_id: null,
                    updated_at: new Date().toISOString()
                })
                .eq('id', selectedStall.id)

            if (stallUpdateError) {
                console.error('Failed to update stall status:', stallUpdateError)
                alert('Failed to update stall status.')
                return
            }

            // Create certificate
            const certificateData = {
                vendor_id: selectedApplicant.id,
                vendor_name: `${selectedApplicant.first_name} ${selectedApplicant.last_name}`,
                business_name: selectedApplicant.business_name,
                stall_number: selectedStall.stall_number,
                section_name: selectedStall.market_sections?.name || 'Unknown Section',
                assigned_date: new Date().toISOString(),
                certificate_number: `CERT-${Date.now()}-${selectedStall.stall_number.replace('-', '')}`,
                raffle_conducted_by: 'Admin',
                status: 'active'
            }

            const { error: certificateError } = await (supabase as any)
                .from('assignment_certificates')
                .insert([certificateData])

            if (certificateError) {
                console.error('Failed to create certificate:', certificateError)
            }

            // Remove losing applicants
            const otherApplicantIds = selectedStall.applicants
                .filter(applicant => applicant.id !== selectedApplicant.id)
                .map(applicant => applicant.id)

            if (otherApplicantIds.length > 0) {
                await (supabase as any)
                    .from('stall_applications')
                    .delete()
                    .in('vendor_application_id', otherApplicantIds)

                await (supabase as any)
                    .from('vendor_applications')
                    .delete()
                    .in('id', otherApplicantIds)
            }

            alert(`Stall assigned successfully! ${selectedApplicant.first_name} ${selectedApplicant.last_name} has been assigned to ${selectedStall.stall_number}.`)
            navigate('/admin/vendors')
        } catch (error) {
            console.error('Error in handleRaffle:', error)
            alert('An error occurred during stall assignment.')
        } finally {
            setRaffling(false)
        }
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-purple-100 via-pink-100 to-indigo-100">
            {/* Header */}
            <header className="bg-white shadow-lg border-b-4 border-purple-300">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex justify-between items-center py-6">
                        <div>
                            <h1 className="text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">
                                � Spinning Wheel Stall Assignment �
                            </h1>
                            <p className="text-gray-600 text-lg mt-1">Spin the wheel of fortune to assign marketplace stalls!</p>
                        </div>
                        <button
                            onClick={() => navigate('/admin/vendors')}
                            className="text-purple-600 hover:text-purple-800 font-semibold"
                        >
                            ← Back to Vendors
                        </button>
                    </div>
                </div>
            </header>

            {/* Main Content */}
            <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {loading ? (
                    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
                        <div className="text-center">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto"></div>
                            <p className="mt-4 text-gray-600">Loading raffle data...</p>
                        </div>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        
                        {/* Left Side - Stall Selection */}
                        <div className="space-y-6">
                            <div className="bg-white rounded-xl shadow-xl border-2 border-purple-200 p-6">
                                <h2 className="text-2xl font-bold text-purple-800 mb-6 flex items-center">
                                    🏪 <span className="ml-2">Market Sections</span>
                                </h2>

                                {availableStalls.length === 0 ? (
                                    <div className="text-center py-12">
                                        <div className="text-6xl mb-4">🎭</div>
                                        <p className="text-gray-500 text-lg">No contestants await their destiny...</p>
                                        <p className="text-sm text-gray-400 mt-2">Only approved vendors will appear for the grand draw</p>
                                    </div>
                                ) : (
                                    <div className="space-y-6">
                                        {Object.entries(
                                            availableStalls.reduce((acc, stall) => {
                                                const sectionName = stall.market_sections?.name || 'Mystery Section'
                                                if (!acc[sectionName]) {
                                                    acc[sectionName] = []
                                                }
                                                acc[sectionName].push(stall)
                                                return acc
                                            }, {} as Record<string, StallWithApplicants[]>)
                                        ).map(([sectionName, stalls]) => (
                                            <div key={sectionName} className="border-2 border-purple-300 rounded-xl p-4 bg-gradient-to-r from-purple-50 to-pink-50">
                                                <h3 className="text-lg font-bold text-purple-800 mb-4">✨ {sectionName}</h3>
                                                <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                                                    {stalls.map((stall) => (
                                                        <div
                                                            key={stall.id}
                                                            className={`border-2 rounded-xl p-4 cursor-pointer transition-all duration-300 text-center hover:scale-105 ${
                                                                selectedStall?.id === stall.id
                                                                    ? 'border-purple-500 bg-purple-100 shadow-lg transform scale-105'
                                                                    : 'border-purple-200 bg-white hover:border-purple-400'
                                                            }`}
                                                            onClick={() => {
                                                                setSelectedStall(stall)
                                                                setSelectedApplicant(null)
                                                                setSpinComplete(false)
                                                                setSpinning(false)
                                                                setWheelRotation(0)
                                                            }}
                                                        >
                                                            <div className="font-bold text-gray-900 text-lg">{stall.stall_number}</div>
                                                            <div className="text-purple-600 text-sm font-semibold">
                                                                {stall.applicants.length} brave soul{stall.applicants.length !== 1 ? 's' : ''}
                                                            </div>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </div>

                            {/* Contestants List */}
                            {selectedStall && (
                                <div className="bg-white rounded-xl shadow-xl border-2 border-purple-200 p-6">
                                    <h2 className="text-2xl font-bold text-purple-800 mb-4 flex items-center">
                                        🌟 <span className="ml-2">Brave Contestants for {selectedStall.stall_number}</span>
                                    </h2>
                                    <div className="space-y-3">
                                        {selectedStall.applicants.map((applicant, index) => (
                                            <div key={applicant.id} className="bg-gradient-to-r from-yellow-50 to-orange-50 p-4 rounded-xl border-l-4 border-yellow-400 hover:shadow-md transition-shadow">
                                                <div className="flex items-center">
                                                    <div className="bg-yellow-400 text-yellow-900 rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-4">
                                                        {index + 1}
                                                    </div>
                                                    <div>
                                                        <div className="font-bold text-gray-900 text-lg">
                                                            {applicant.first_name} {applicant.last_name}
                                                        </div>
                                                        <div className="text-gray-600">{applicant.business_name}</div>
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Right Side - Spinning Wheel Raffle */}
                        <div className="flex flex-col items-center justify-center">
                            <div className="bg-white rounded-2xl shadow-2xl border-4 border-green-400 p-8 w-full max-w-lg">
                                <h2 className="text-3xl font-bold text-center mb-8 bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">
                                    � Spinning Wheel Raffle �
                                </h2>

                                {/* Spinning Wheel Container */}
                                <div className="relative w-80 h-80 mx-auto mb-8">
                                    
                                    {/* The Wheel */}
                                    {selectedStall && selectedStall.applicants.length > 0 && (
                                        <div className="relative w-full h-full">
                                            <div 
                                                className={`w-full h-full rounded-full border-8 border-gray-800 shadow-2xl transition-transform duration-[3000ms] ease-out ${spinning ? 'animate-spin' : ''}`}
                                                style={{ 
                                                    transform: `rotate(${wheelRotation}deg)`,
                                                    background: `conic-gradient(${selectedStall.applicants.map((_, index) => {
                                                        const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8E8', '#F7DC6F'];
                                                        const segmentAngle = 360 / selectedStall.applicants.length;
                                                        const startAngle = index * segmentAngle;
                                                        const endAngle = (index + 1) * segmentAngle;
                                                        return `${colors[index % colors.length]} ${startAngle}deg ${endAngle}deg`;
                                                    }).join(', ')})`
                                                }}
                                            >
                                                {/* Names on the wheel */}
                                                {selectedStall.applicants.map((applicant, index) => {
                                                    const segmentAngle = 360 / selectedStall.applicants.length;
                                                    const rotation = index * segmentAngle + segmentAngle / 2;
                                                    return (
                                                        <div
                                                            key={applicant.id}
                                                            className="absolute w-full h-full flex items-center justify-center"
                                                            style={{
                                                                transform: `rotate(${rotation}deg)`,
                                                                transformOrigin: 'center'
                                                            }}
                                                        >
                                                            <div 
                                                                className="bg-white bg-opacity-90 px-3 py-1 rounded-lg shadow-md font-bold text-gray-800 text-sm"
                                                                style={{
                                                                    transform: 'translateY(-120px)',
                                                                    maxWidth: '100px',
                                                                    textAlign: 'center'
                                                                }}
                                                            >
                                                                <div className="truncate">{applicant.first_name}</div>
                                                                <div className="truncate text-xs">{applicant.last_name}</div>
                                                            </div>
                                                        </div>
                                                    );
                                                })}
                                            </div>

                                            {/* Center Hub */}
                                            <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-20 h-20 bg-gray-800 rounded-full border-4 border-white shadow-xl flex items-center justify-center z-10">
                                                <div className="text-white font-bold text-xs text-center">WHEEL</div>
                                            </div>

                                            {/* Pointer */}
                                            <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-2 z-20">
                                                <div className="w-0 h-0 border-l-4 border-r-4 border-b-8 border-l-transparent border-r-transparent border-b-red-600"></div>
                                            </div>
                                        </div>
                                    )}

                                    {/* No contestants message */}
                                    {(!selectedStall || selectedStall.applicants.length === 0) && (
                                        <div className="w-full h-full rounded-full border-8 border-gray-300 bg-gray-100 flex items-center justify-center">
                                            <div className="text-center text-gray-500">
                                                <div className="text-4xl mb-4">�</div>
                                                <div className="font-bold">Select a stall</div>
                                                <div className="text-sm">to see the wheel</div>
                                            </div>
                                        </div>
                                    )}
                                </div>

                                {/* Status Display */}
                                <div className="text-center mb-8 p-6 bg-gradient-to-r from-green-100 to-blue-100 rounded-2xl border-2 border-green-300">
                                    {spinning && (
                                        <div className="text-green-800 font-bold text-xl animate-pulse">
                                            � The wheel is spinning... who will it choose? 🎯
                                        </div>
                                    )}
                                    {selectedApplicant && spinComplete && (
                                        <div className="text-blue-700 font-bold text-2xl animate-bounce">
                                            🎊 WINNER SELECTED! 🎊
                                        </div>
                                    )}
                                    {!spinning && !spinComplete && selectedStall && selectedStall.applicants.length > 0 && (
                                        <div className="text-gray-700 font-semibold text-lg">
                                            � Ready to spin! �
                                            <div className="text-green-600 mt-2">
                                                {selectedStall.applicants.length} contestant{selectedStall.applicants.length !== 1 ? 's' : ''} on the wheel
                                            </div>
                                        </div>
                                    )}
                                    {!selectedStall && (
                                        <div className="text-gray-500 italic">
                                            Select a stall to load the wheel...
                                        </div>
                                    )}
                                </div>

                                {/* Spin Controls */}
                                <div className="text-center space-y-6">
                                    <div className="flex justify-center space-x-4">
                                        <button
                                            onClick={spinWheel}
                                            disabled={spinning || !selectedStall || selectedStall.applicants.length === 0}
                                            className={`px-16 py-8 rounded-full font-bold text-2xl shadow-2xl transition-all duration-300 ${
                                                spinning || !selectedStall || selectedStall.applicants.length === 0
                                                    ? 'bg-gray-400 text-gray-700 cursor-not-allowed'
                                                    : 'bg-gradient-to-r from-green-500 to-blue-500 text-white hover:from-green-600 hover:to-blue-600 hover:scale-110 active:scale-95 shadow-green-400'
                                            }`}
                                        >
                                            {spinning ? (
                                                <div className="flex items-center space-x-3">
                                                    <div className="animate-spin rounded-full h-8 w-8 border-b-4 border-white"></div>
                                                    <span>SPINNING...</span>
                                                </div>
                                            ) : (
                                                'START'
                                            )}
                                        </button>

                                        <button
                                            onClick={() => {
                                                setSelectedApplicant(null)
                                                setSpinComplete(false)
                                                setSpinning(false)
                                                setWheelRotation(0)
                                            }}
                                            className="px-8 py-4 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-2xl hover:from-gray-600 hover:to-gray-700 transition-all font-bold shadow-xl"
                                        >
                                            🔄 Reset
                                        </button>
                                    </div>

                                    {/* Winner announcement */}
                                    {selectedApplicant && spinComplete && (
                                        <div className="p-8 bg-gradient-to-br from-yellow-100 to-orange-100 rounded-3xl border-4 border-yellow-400 shadow-2xl">
                                            <div className="text-yellow-800 font-black text-2xl mb-4">
                                                🏆 WINNER! 🏆
                                            </div>
                                            <div className="text-3xl font-bold text-orange-900 mb-3">
                                                {selectedApplicant.first_name} {selectedApplicant.last_name}
                                            </div>
                                            <div className="text-orange-700 font-semibold text-lg mb-4">
                                                Congratulations! The wheel has chosen you for stall {selectedStall?.stall_number}!
                                            </div>
                                            <div className="flex justify-center space-x-2">
                                                {['�', '🎊', '🏆', '🎉', '⭐', '�'].map((emoji, i) => (
                                                    <span key={i} className="text-3xl animate-bounce" style={{ animationDelay: `${i * 0.1}s` }}>
                                                        {emoji}
                                                    </span>
                                                ))}
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Final ceremony button */}
                            <div className="mt-8">
                                <button
                                    onClick={handleRaffle}
                                    disabled={!selectedStall || !selectedApplicant || raffling}
                                    className={`px-12 py-6 rounded-2xl font-bold text-2xl shadow-2xl transition-all duration-300 ${
                                        !selectedStall || !selectedApplicant || raffling
                                            ? 'bg-gray-400 text-gray-700 cursor-not-allowed'
                                            : 'bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600 hover:scale-105 shadow-green-300'
                                    }`}
                                >
                                    {raffling ? (
                                        <div className="flex items-center space-x-3">
                                            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                                            <span>Crowning the Champion...</span>
                                        </div>
                                    ) : !selectedStall ? (
                                        '🎪 Select a stage for the grand performance'
                                    ) : !selectedApplicant ? (
                                        '🎭 Complete the mystical draw first'
                                    ) : (
                                        '👑 CROWN THE CHAMPION & BESTOW THE STALL! 👑'
                                    )}
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </main>
        </div>
    )
}
